/** 
*	@name THREEDOX.Game.js 
*	@author DH
*/

/**
* @Class Game
* 
*/
function Game(gameId) {
	this.id = gameId;
	
	this.whoTurnId = null;
	this.whoTurn = 'player1';
	
	this.endGame = false;
	this.gameStarted = false;
	
	this.signChosen = false;
	this.signLeft = null;
	
	this.score = {
		player1: 0,
		player2: 0,
		recent: {
			sign: null,
			player: null
		},
		whoWon: null,
		draw: false
	}
	
	this.changeTurn = function() {
			if(this.whoTurn === 'player1')
				this.whoTurn = 'player2'
			else 
				this.whoTurn = 'player1';
	}
	
	this.setSignChoice = function(sign) {
		if(sign === 'o') {
			this.signChosen = true;
			this.signLeft = 'x';
		} else if(sign === 'x') {
			this.signChosen = true;
			this.signLeft = 'o';
		}
		return this.signChosen;
	}
	
	// tablica możliwych kombinacji 
	/**
	*	(Jak nie jesteś autorem i próbujesz zrozumieć logikę poniższego kodu, to przestań szkoda czasu ;)
	*	wystarczy żebyś wiedzial, że ta magia na dole generuje wszystkie możliwości zdobycia punktu na trójwymiarowej 
	*	planszy kólka i krzyżyk. Zapewne zastanawiasz się, dlaczego ich poprostu nie wypisalem, przecież jest ich tylko 49
	*	i zapewne zajęlo by mi to dużo mniej czasu niż wymyślenie tego algorytmu. Odpowiedź jest prosta: for fun! 
	*	Jak nie rozumiesz nie pytaj twórcy, bo i tak nie zrozumiesz ;P)
	*/
	this.combin = (function() {
		// tools
		String.prototype.wstaw = function(co, gdzie) { return this.slice(0, gdzie) + co + this.slice(gdzie);}
			
		function fix(str) {
			var i = parseInt(str.slice(0, 1));
			var j = parseInt(str.slice(1, 2));
			var k = parseInt(str.slice(2, 3));
			return [i, j, k];
		}
    
		// przekątne sześcianu
		var combin = [ [0,0,0,1,1,1,2,2,2], [2,0,0,1,1,1,0,2,2], [0,2,0,1,1,1,2,0,2], [2,2,0,1,1,1,1,0,2] ];
		var tab = [ ['0', '1', '2'], ['20', '02'], ['00', '22'] ];
    
		// przekątne plaszczyzn
			for(var g = 0; g < 3; g++) {
				for(var c = 0; c < 3; c++) {
					for(var t=1; t < tab.length; t++) {
						combin.push(fix(tab[t][0].wstaw(c, g)).concat(fix('11'.wstaw(c, g))).concat(fix(tab[t][1].wstaw(c, g))));
					}	
				}
			}
    
		// poziome, pionowe i wysokości
			for(var i = 0; i < 3; i++) {
				for(var j = 0; j < 3; j++) {
					for(var g = 0; g < 3; g++) {
						combin.push(fix((''+i+j).wstaw(tab[0][0], g)).concat(fix((''+i+j).wstaw(tab[0][1], g))).concat(fix((''+i+j).wstaw(tab[0][2], g))));
					}
				}
			}
    
		return combin;
	})();
	
	this.field = (function() {
		var tab = [];
		for(var i = 0; i < 3; i++) {
			tab[i] = [];
			for(var j = 0; j < 3; j++) {
				tab[i][j] = [];
				for(var k = 0; k < 3; k++) {
					tab[i][j][k] = "";
				}	
			}	
		}
		return tab;
	})();
	
	this.fillFieldCell = function(sign, i, j, k) {
		this.field[i][j][k] = sign;
	}
	
	this.addPoint = function(sign) {
		this.score[this.whoTurn]++;
		this.score.recent.player = this.whoTurn;
		this.score.recent.sign = sign;
		//console.log("Player1: "+this.score.player1+", Player2: "+this.score.player2);
	}
	
	this.countEmpty = function() {
		var count = 0;
		for(var i = 0; i < 3; i++) {
			for(var j = 0; j < 3; j++) {
				for(var k = 0; k < 3; k++) {
					if(this.field[i][j][k] === "") count++; 
				}	
			}	
		}
		return count;
	}
	
	this.checkWhoWins = function() {
		//console.log('Puste miejsca: '+this.countEmpty());
		if(this.countEmpty() <= 4) {
			if(this.score.player1 > this.score.player2) {
				// wygrywa player1, gra skonczona
				this.score.whoWon = 'player1';
				
			} else if(this.score.player1 < this.score.player2) {
				// wygrywa player2 gra skonczona
				this.score.whoWon = 'player2';
				
			} else if(this.score.player1 === this.score.player2) {
				// remis, gra skonczona
				this.score.draw = true;
			}
			this.endGame = true;
		}
	}
	
	// sprawdza trafienia na field
	this.checkShots = function() {
		var zn = ['o', 'x'];
		
		for(var p=0; p<zn.length; p++) {
			var z = zn[p];
			for(var i=0; i<this.combin.length; i++) {

				// fajne, nie?
				if(this.field[this.combin[i][0]][this.combin[i][1]][this.combin[i][2]] === z
				&& this.field[this.combin[i][3]][this.combin[i][4]][this.combin[i][5]] === z
				&& this.field[this.combin[i][6]][this.combin[i][7]][this.combin[i][8]] === z) {
							
					console.log('Trafione: ' + z );
					this.field[this.combin[i][0]][this.combin[i][1]][this.combin[i][2]] = 'n'+z;
					this.field[this.combin[i][3]][this.combin[i][4]][this.combin[i][5]] = 'n'+z;
					this.field[this.combin[i][6]][this.combin[i][7]][this.combin[i][8]] = 'n'+z;
					this.addPoint(z);
					
				}
			}	
		}
		
		this.checkWhoWins();
	}
	
}

module.exports = Game;