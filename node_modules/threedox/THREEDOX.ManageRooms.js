/** 
*	@name THREEDOX.ManageRooms.js 
*	@author DH
*/


var Game = require('./THREEDOX.Game');

/**
* @Class Room
* 
*/
function Room(obj) {

	this.id = obj.id;
    
	this.game = new Game(this.id);
	
    //gracze
    this.players = {
        player1: obj.player1 || null, 
        player2: obj.player2 || null
    };
    
    //czy pokój jest pelny
    this.fullyFilled = false;
    
    //sprawdza ile ludzi jest w pokoju
    this.getPeople = function() {
        if(this.players.player1 === null && this.players.player2 === null) {
            return 0;
        } else if(this.players.player1 === null || this.players.player2 === null) {
            return 1;
        } else {
            return 2;
        }
    }
    
    //zwraca numer pustego miejsca
    this.getEmptySeat = function() {
        if(this.getPeople() === 1) {
            if(this.players.player1 === null) 
                return 1; 
            else 
                return 2;
        } else if(this.getPeople() === 0) {
            return 1;
        } else {
            return null;
        }
    }
	
	//ustawia stan fullyFilled
	this.setFilledState = function() {
        if(this.getPeople() === 2){
            this.fullyFilled = true;
        } else {
			this.fullyFilled = false;
		}
    }
    
}

/**
* @Class ManageRooms
* 
*/ 
function ManageRooms() {
	//tablica pokoi
    this.rooms = [];
    
	//przydziela graczowi pokój
    this.giveMeRoom = function(player) {
		//brak jakichkolwiek pokoi
        if(this.rooms.length === 0) {
			player.roomId = this.rooms.length;
			player.number = 1;
            this.rooms.push( new Room( { player1: player, id: this.rooms.length} ) );
        } else {
		//są pokoje
			var booked = false;
			
			//znajduje pokój z 1 graczem i przydzelam miejsce
            this.rooms.forEach(function(roomObj, ind) {
                if(roomObj.getPeople() === 1) {
                    var numSeat = roomObj.getEmptySeat();
					player.roomId = roomObj.id;
					player.number = numSeat;
                    roomObj.players['player' + numSeat] = player;
					roomObj.setFilledState();
					booked = true;
                } 
            });
			
			if(!booked) {
				player.roomId = this.rooms.length;
				player.number = 1;
				this.rooms.push( new Room( { player1: player, id: this.rooms.length} ) );
			}
			
        }
    }
	
	//usuwa puste pokoje
	this.deleteEmptyRooms = function() {
		var deleted = false;
		
		for(var i=0; i<this.rooms.length; i++) {
			var roomObj = this.rooms[i];
			if(roomObj.getPeople() === 0) { 
				this.rooms.splice(i, 1);
				deleted = true;
			}
		}
		
		return deleted;
	}
	
	//usuwa graczy po id (który przydziela serwer) i usuwa puste tablice
	this.deletePlayer = function(id) {
		var deleted = false;
		
		for(var i=0; i<this.rooms.length; i++) {

			var roomObj = this.rooms[i];
			for(var prop in roomObj.players) {
			
				var  player = roomObj.players[prop];
				if(player !== null && player.id === id) {
					this.rooms[i].players[prop] = null;
					deleted = true;
					
					this.deleteEmptyRooms();
					
					break;
				}
			}
			
			if(deleted) break;
		}
		
		return deleted;
			
	}
	
	//pobiera obiekt gracza po id gracza
	this.getPlayerById = function(id) {
		for(var i=0; i<this.rooms.length; i++) {
			var roomObj = this.rooms[i];
			for(var prop in roomObj.players) {
				var  player = roomObj.players[prop];
				if(player !== null && player.id === id) 
					return this.rooms[i].players[prop];
			}
		}
	}
	
	//pobiera obiekt gry po id gracza
	this.getGameByPlayerId = function(id) {
		var roomId = this.getPlayerById(id).roomId;
		return this.rooms[roomId].game;
	}
	
	this.getPartnerByPlayerId = function(id) {
		for(var i=0; i<this.rooms.length; i++) {
			var roomObj = this.rooms[i];
			for(var prop in roomObj.players) {
				var  player = roomObj.players[prop];
				if(player !== null && player.id === id) {
					//return this.rooms[i].players[prop];
					if(prop === 'player1') {
						return this.rooms[i].players['player2'];
					} else {
						return this.rooms[i].players['player1'];
					}
					
				}
			}
		}
	}
	
}

module.exports = ManageRooms;